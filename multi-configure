#!/bin/bash
#-------------------------------------------------------
# multi-configure
#-------------------------------------------------------
# This script is run in the ffmpeg source directory,
# to create out-of-tree build configurations to build
# the ffmpeg static libraries.
#
#  ./multi-configure  [all | win | x86 | arm | arm7 | host]
#
#-------------------------------------------------------
#
# This file is distributed under the GNU GENERAL PUBLIC LICENSE version 2.
# Please see the file `COPYING.GPLv2` for details.
#
# You are free to modify it, and distribute in any way you see fit,
# as long as you retain this notification and all copyrights herein.
#
# This software is provided without any warranty, explicit or implied.
#
# (c) Copyright 2015 - Patrick Horton


FFMPEG_VERSION=multi-tip
    # This is explicity set by the branch checkout

START_DIR=$PWD
    # The current working directory

HOST_PREFIX=_linux
    # Default host platform for the ndk
HOST_PLATFORM=linux-x86
    # The platform for this host within the ndk

if [ "$WINDIR" != "" ]
then
    HOST_PREFIX=_win
    HOST_PLATFORM=windows
fi

BUILD_BASE=$START_DIR/../_build/ffmpeg/$FFMPEG_VERSION/$HOST_PREFIX

VBOX_SHARED_FOLDER=1
    # This define has no effect on _win host builds.
    # On vbox _linux host builds, this fixes the strip
    # Protocol Error and symlinked makefile problems.


# 2016-04-16 changes for artisan
#---------------------------------------
# FFMPEG BUILD
#---------------------------------------
# By default, FFMPEG, the libraries it depends on,
# all native filters, muxers, and encoders are built.
# I use ffmpeg to access HTTP files, so WITH_NETWORK,
# and not -disable-network, has to be included for me.
# This impacts the Chromaprint build which must use
# specific flags (-lw_32s) to link WinSock on windows

WITH_HTTP="
    --enable-protocol=http"

# This macro sets up for optimized FFMPEG build

OPTIMIZED_FFMPEG="
     --disable-encoders
     --disable-filters    
     --disable-muxers"
    
# if building an OPTIMIZED version of ffmpeg
# that contains only FFMPEG and the minimum
# needed encoders, include this:

FFMPEG_FILTERS="
    --disable-filters    
    --enable-filter=aformat
    --enable-filter=anull
    --enable-filter=atrim
    --enable-filter=format
    --enable-filter=null
    --enable-filter=setpts
    --enable-filter=trim
    --enable-filter=buffer
    --enable-filter=buffersink"
    # buffer and buffersink are specific to 0.9


# If building an optimized WAV (pcm) codec
# which works with default params
#    "ffmpeg -i blah.wma output.wav"
# this causes the build to include the minimum
# signed little endian 16 bit PCM encoder, muxer
# and a dependency

OPTIMIZED_PCM="
    --disable-encoders
    --enable-encoder=pcm_s16le
    --enable-muxer=wav
    --enable-filter=aresample"

# These are the same basic flags as Lukas Lalinsky's stripped
# ffmpeg configuration, from ffmpeg-configure-mingw32.sh,
# from his guide on how to compile chromaprint for windows

BASE_CONFIG="
    --enable-static
    --disable-shared
    --disable-doc
    --disable-txtpages
    --disable-iconv

    --enable-memalign-hack
    --enable-debug
    --disable-avdevice
    --disable-ffplay
    --disable-ffserver

    --disable-protocols
    --enable-protocol=file
    
    --enable-rdft
    --disable-demuxers
    --enable-demuxer=aac
    --enable-demuxer=ac3
    --enable-demuxer=ape
    --enable-demuxer=asf
    --enable-demuxer=flac
    --enable-demuxer=matroska_audio
    --enable-demuxer=mp3
    --enable-demuxer=mpc
    --enable-demuxer=mov
    --enable-demuxer=mpc8
    --enable-demuxer=ogg
    --enable-demuxer=tta
    --enable-demuxer=wav
    --enable-demuxer=wv
    
    --disable-bsfs

    --disable-parsers
    --enable-parser=aac
    --enable-parser=ac3
    --enable-parser=mpegaudio

    --disable-indevs
    --disable-outdevs

    --disable-decoders
    --enable-decoder=aac
    --enable-decoder=ac3
    --enable-decoder=alac
    --enable-decoder=ape
    --enable-decoder=flac
    --enable-decoder=mp1
    --enable-decoder=mp2
    --enable-decoder=mp3
    --enable-decoder=mpc7
    --enable-decoder=mpc8
    --enable-decoder=tta
    --enable-decoder=vorbis
    --enable-decoder=wavpack
    --enable-decoder=wmav1
    --enable-decoder=wmav2
    --enable-decoder=pcm_alaw
    --enable-decoder=pcm_dvd
    --enable-decoder=pcm_f32be
    --enable-decoder=pcm_f32le
    --enable-decoder=pcm_f64be
    --enable-decoder=pcm_f64le
    --enable-decoder=pcm_s16be
    --enable-decoder=pcm_s16le
    --enable-decoder=pcm_s16le_planar
    --enable-decoder=pcm_s24be
    --enable-decoder=pcm_daud
    --enable-decoder=pcm_s24le
    --enable-decoder=pcm_s32be
    --enable-decoder=pcm_s32le
    --enable-decoder=pcm_s8
    --enable-decoder=pcm_u16be
    --enable-decoder=pcm_u16le
    --enable-decoder=pcm_u24be
    --enable-decoder=pcm_u24le
    --enable-decoder=rawvideo"

#---------------------
# USE ONE OF THESE
#---------------------
# Don't include ffmpeg
# swscale is specific to 0.09

NO_FFMPEG="
    --disable-ffmpeg
    --disable-avfilter
    --disable-network
    --disable-swscale
    $OPTIMIZED_FFMPEG
    $BASE_CONFIG"

# Full ffmpeg build
# Specific demuxers are necessary for certain codecs
# included in the native build, and since I disabled
# them, I have to explicitly re-enable them. It was
# easier to just disable g273_1 than to figure out
# what it needed .... --enable-demuxer=g723_1
# and h263, flv on multi-tip


FULL_FFMPEG_CONFIG="
    $BASE_CONFIG
    $WITH_HTTP
    --enable-demuxer=adx
    --disable-encoder=g723_1
    --disable-muxer=g723_1
    --disable-encoder=flv
    --disable-muxer=flv
    --disable-encoder=h263
    --disable-muxer=h263"

# optimized PCM/WAV encoder

OPTIMIZED_PCM_CONFIG="
    $BASE_CONFIG
    $OPTIMIZED_FFMPEG
    $FFMPEG_FILTERS
    $OPTIMIZED_PCM
    $WITH_HTTP"


# try a full native build with almost everything
# except protocols and parsers

FULL_DAMNED_CONFIG="
    --enable-static
    --disable-shared
    --disable-doc
    --disable-txtpages
    --disable-iconv
    --enable-memalign-hack
    --enable-debug
    --disable-avdevice
    --disable-ffplay
    --disable-ffserver
    --disable-bsfs
    --disable-indevs
    --disable-outdevs
    
    --disable-protocols
    --enable-protocol=file
    --enable-protocol=http
    
    --disable-parsers
    --enable-parser=aac
    --enable-parser=ac3
    --enable-parser=mpegaudio"


#---------------------------------------
# configure_one
#---------------------------------------

function configure_one
    # param1 = the build to perform.
    # The remainder of the params are -- items
    # to pass to the main ffmpeg configure script.
{
    WHICH=$1
    shift;

    echo -------------------------
    echo configure_one $WHICH
    echo -------------------------

    PREFIX=$BUILD_BASE/$WHICH/build
    mkdir -p $PREFIX
    cd $PREFIX

    INSTALL_DIR=$BUILD_BASE/$WHICH
    INSTALL_CFG="
        --bindir=$INSTALL_DIR/bin
        --libdir=$INSTALL_DIR/lib
        --incdir=$INSTALL_DIR/include
        --shlibdir=$INSTALL_DIR/bin"

    echo
    echo "CONFIGURATION: --prefix=$PREFIX $@" $INSTALL_CFG
    echo

    # I only use FFMPEG encoding (currently) on x86 emulators
    # to play WMA files, so it is not needed for any other build
    
    echo
    USE_CONFIG=$NO_FFMPEG
    if [ "$WHICH" == "x86" ]
    then
        USE_CONFIG=$FULL_DAMNED_CONFIG
        echo Building with full FULL_DAMNED_CONFIG
    else
        echo Building without FFMPEG
    fi
    echo $USE_CONFIG
    echo
    echo
    
    # do the actual configuration.

    $START_DIR/configure --prefix=$PREFIX "$@" $INSTALL_CFG $USE_CONFIG

    if [ $? -ne 0 ]
    then
        echo There was an error in configuring $1
        cd $START_DIR
        exit 1
    fi

    echo
    echo The configuration of $WHICH is finished
    echo
}



echo ---------------------------------------------
echo "multi-configure($FFMPEG_VERSION) $@ ..."
echo ---------------------------------------------

# variables common to all builds

COMMON_CFLAGS="-Os"
COMMON_BINDIR=$START_DIR/$INSTALL_DIR
COMMON_LIBDIR=$START_DIR/$INSTALL_DIR

# variables common to non-windows builds

NDK_ARCH="$NDK/platforms/android-9/arch"
NDK_CFLAGS="-fpic $COMMON_CFLAGS"
NDK_COMMON="--target-os=linux --enable-cross-compile --disable-pthreads"

# changes specific to VBOX_SHARED_FOLDERS, not on _win host

if [ "$WINDIR" == "" ]
then
    test $VBOX_SHARED_FOLDER && MULTI_STRIP="$START_DIR/multi-strip"
fi


#------- loop through builds --------

for BUILD in "$@"
do

    if [ "$BUILD" == "all" -o "$BUILD" == "win" ]
    then

        # --disable-yasm is 2.7+ specific fix for issue described above

        test "$WINDIR" == "" && CROSS_PREFIX=i586-mingw32msvc-
        test "$WINDIR" == "" && LINUX_SPECIFIC_OPTIONS="--disable-werrors --disable-yasm"
        test "$MULTI_STRIP" != "" && USE_STRIP="$MULTI_STRIP $CROSS_PREFIX"

        configure_one win \
            --arch=x86 \
            --target-os=mingw32 \
            --cross-prefix=$CROSS_PREFIX \
            --extra-cflags="$COMMON_CFLAGS" \
            --strip="$USE_STRIP" \
            $LINUX_SPECIFIC_OPTIONS \
            $COMMON
    fi


    if [ "$BUILD" == "all" -o "$BUILD" == "x86" ]
    then

        CROSS_PREFIX=$NDK/toolchains/x86-4.8/prebuilt/$HOST_PLATFORM/bin/i686-linux-android-
        test "$MULTI_STRIP" != "" && USE_STRIP="$MULTI_STRIP $CROSS_PREFIX"

        configure_one x86 \
            --arch=x86 \
            --sysroot=$NDK_ARCH-x86/ \
            --cross-prefix=$CROSS_PREFIX  \
            --extra-cflags="$NDK_CFLAGS" \
            --strip="$USE_STRIP" \
            $NDK_COMMON \
            $COMMON
    fi

    if [ "$BUILD" == "all" -o "$BUILD" == "arm" ]
    then

        CROSS_PREFIX=$NDK/toolchains/arm-linux-androideabi-4.8/prebuilt/$HOST_PLATFORM/bin/arm-linux-androideabi-
        test "$MULTI_STRIP" != "" && USE_STRIP="$MULTI_STRIP $CROSS_PREFIX"

        configure_one arm \
            --arch=arm \
            --sysroot=$NDK_ARCH-arm/ \
            --cross-prefix=$CROSS_PREFIX \
            --extra-cflags="-marm $NDK_CFLAGS" \
            --strip="$USE_STRIP" \
            $NDK_COMMON \
            $COMMON
    fi


    if [ "$BUILD" == "all" -o "$BUILD" == "arm7" ]
    then

        CROSS_PREFIX=$NDK/toolchains/arm-linux-androideabi-4.8/prebuilt/$HOST_PLATFORM/bin/arm-linux-androideabi-
        test "$MULTI_STRIP" != "" && USE_STRIP="$MULTI_STRIP $CROSS_PREFIX"

        # early versions use enable-armvfp, later versions use enable-vfp

        configure_one arm7 \
            --arch=arm \
            --cpu=armv7-a \
            --enable-vfp \
            --enable-neon \
            --sysroot=$NDK_ARCH-arm/ \
            --cross-prefix=$CROSS_PREFIX \
            --extra-cflags="-mfloat-abi=softfp -mfpu=vfpv3  -marm $NDK_CFLAGS" \
            --strip="$USE_STRIP" \
            $NDK_COMMON \
            $COMMON
    fi


    # multi-configure host must be explicitly provided
    # the host configure is not part of all (and does
    # not work on windows, use "win" build instead)

    if [ "$BUILD" == "host" ]
    then

        test "$MULTI_STRIP" != "" && USE_STRIP="$MULTI_STRIP"

        configure_one host \
            --disable-pthreads \
            --extra-cflags="$COMMON_CFLAGS" \
            --strip="$USE_STRIP" \
            $COMMON

    fi  # host build

done


echo
echo ---------------------------------------------
echo "multi-configure($FFMPEG_VERSION) finished"
echo ---------------------------------------------
cd $START_DIR
